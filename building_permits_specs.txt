PERMITS
The permits.py script should rely on a Python package supported by a setup.py script
  and available on GitHub.com. Thus, installation for anyone ever will consist of:
  1. downloading the package from github
  2. unzipping the contents
  3. run `python setup.py install` at the commandline in that directory

Once installed the following arguments will be accessable using the command line.

Commandline Arguments:
All commandline arguments assume the database already exists and will modify it,
  except the --reset option which backs-up and recreates the database from scratch.
This is because the database should be maintained rather than recreated every year.

"the model" includes the downloading, processing, and spatialization processes


Realism: we will never need options for only downloading, processing, or spatializing
  data by year


Most frequently used arguments:
-------------------------------

permits.py --append <year>
    Run the model for city permit data for the calendar year of <year>

permits.py --county <year>
    Process (county method) and spatialize previously received County data for <year>
    - filename must contain the year



Other arguments:
----------------

permits.py --reset
    Runs the full permits model from 2013 data to most recent permit year
    - Ask the user "Are you sure? y/n"
    - Tell user "We've backed-up the old database to /archive/"

permits.py --from 2013 --to 2015
    Run the model for a specified range of years
    Maybe useless?



permits.py --update-geometry
    Drops the processing geometries and reloads them with the expectation that
      they've been updated.

permits.py --add-geometry <[list, of, features]>
permits.py --rm-geometry


2018 Scenario:
Email the county for their data and place properly-named excel file(s) to county/raw/
run `permits.py --update` to update the required geometries (spatial data)
run `permits.py --run` to download, process, spatialize permit data and output reports




import argparse
import sys
from datetime import datetime as dt

CURRENT_YEAR = dt.now().year

start_fmt = "01/01/{}"
end_fmt = "12/31/{}"


if __name__ == "__main__":
    # Arg Parser stuff
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--from", action="store", dest="yr_from",
                        help="Start year")
    parser.add_argument("--to", action="store", dest="yr_to",
                        help="End year")
    parser.add_argument("-a", "--append-year", action="store",
                        dest="append", help="Append a year of permit data")
    parser.add_argument("--reset", action="store",
                        dest="append", help="Append a year of permit data")

    if
    args = parser.parse_args(['--from', 2013, '--to', 2016])
    years = list(range(args.yr_from, args.yr_to + 1))
    for year in years:
        download_permit_data(year)
        process_permit_data(year)